version: "3.7"
networks:
    # the internal network is a bridge network used by the
    # api container and database
    # We could also bypass this in favor of port fowarding to the host machine and
    # communicating over tcp through the host, but this showcases a way to use docker's internal DNS to
    # resolve networks
    internal:
        name: gatech_internal
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 10.17.0.0/16
services:
    # api holds all of our backend code
    groceryExpressOne:
        image: gatech/backend
        networks:
            - internal
        ports:
            - "8081:8080"
        environment:
            - DB_HOST=grocerydb
            - DB_USER=admin
            - DB_PASS=admin
            - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/grocerydb
        depends_on:
            - db
        # sleep for 5 seconds to give the db time to boot up
        command: >
            sh -c "sleep 30 &&
               java -jar /GroceryExpress/GroceryExpress-0.0.1-SNAPSHOT.jar"

    # api holds all of our backend code
    groceryExpressTwo:
        image: gatech/backend
        networks:
            - internal
        ports:
            - "8082:8080"
        environment:
            - DB_HOST=grocerydb
            - DB_USER=admin
            - DB_PASS=admin
            - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/grocerydb
        depends_on:
            - db
        # sleep for 5 seconds to give the db time to boot up
        command: >
            sh -c "sleep 30 &&
               java -jar /GroceryExpress/GroceryExpress-0.0.1-SNAPSHOT.jar"

    # api holds all of our backend code
    groceryExpressThree:
        image: gatech/backend
        networks:
            - internal
        ports:
            - "8083:8080"
        environment:
            - DB_HOST=grocerydb
            - DB_USER=admin
            - DB_PASS=admin
            - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/grocerydb
        depends_on:
            - db
        # sleep for 5 seconds to give the db time to boot up
        command: >
            sh -c "sleep 30 &&
               java -jar /GroceryExpress/GroceryExpress-0.0.1-SNAPSHOT.jar"
    # site is the container holding all of the front end code
    site:
        image: gatech/frontend
        networks:
            - internal
        ports:
            # expose the container's port 80 on the host's 3001
            - "3001:80"
        environment:
           - NGINX_HOST=localhost
           - NGINX_PORT=80
        depends_on:
            - groceryExpressOne
            - groceryExpressTwo
            - groceryExpressThree
        command: >
            sh -c "sleep 40 && nginx -g 'daemon off;'"
    # db is a MySQL instance
    db:
        image: mysql:latest
        networks:
            - internal
        environment:
            - MYSQL_DATABASE=grocerydb
            - MYSQL_USER=admin
            - MYSQL_PASSWORD=admin
            - MYSQL_ROOT_PASSWORD=root
        ports:
            - "3306:3306"
